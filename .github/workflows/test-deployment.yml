name: Deploy Test Environment

on:
  push:
    branches:
      - main

jobs:
  deploy-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.TEST_SSH_PRIVATE_KEY }}

      - name: Setup SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env.test file
        run: |
          cat > .env.test << EOL
          DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}
          DISCORD_REDIRECT_URI=http://52.160.40.146:3001/auth/redirect
          DISCORD_GUILD_ID=${{ secrets.DISCORD_GUILD_ID }}
          DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
          PORT=3001
          DB_SERVICE_URL=http://backend:3001
          MYSQL_HOST=mysql
          MYSQL_PORT=6969
          MYSQL_USER=root
          MYSQL_PASSWORD=
          MYSQL_DB=gameon_db
          SESSION_SECRET=yourSessionSecret
          REDIS_URL=redis://redis:6379
          EOL

      - name: Deploy to test environment
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "mkdir -p ~/test-deployments/deploy-${{ github.sha }}"
          scp -r ./backend ./docker-compose.yml ./.env.test ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }}:~/test-deployments/deploy-${{ github.sha }}/

      - name: Setup and run test environment
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "cd ~/test-deployments/deploy-${{ github.sha }} && \
          export TEST_PORT=\$(( 8000 + \$(( RANDOM % 1000 )) )) && \
          sed -i 's/PORT=3000/PORT='\$TEST_PORT'/g' .env.test && \
          docker compose -p test-${{ github.sha }} up -d --build && \
          echo 'Waiting for services to start...' && \
          sleep 30"

      - name: Run tests
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "cd ~/test-deployments/deploy-${{ github.sha }}/backend && \
          npm install && \
          npm test"

      - name: Cleanup test environment
        if: always()
        run: |
          ssh ${{ secrets.VM_USERNAME }}@${{ secrets.VM_HOST }} "cd ~/test-deployments/deploy-${{ github.sha }} && \
          docker compose -p test-${{ github.sha }} down -v && \
          cd ~ && \
          rm -rf ~/test-deployments/deploy-${{ github.sha }}"