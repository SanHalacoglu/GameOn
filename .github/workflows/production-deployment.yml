name: Deploy Production

on:
  workflow_dispatch:
    inputs:
      branch:
        description: 'Branch to deploy'
        required: true
        default: 'main'
      tag:
        description: 'Tag to deploy (optional)'
        required: false

jobs:
  deploy-production:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch }}
          fetch-depth: 0

      - name: Checkout tag if provided
        if: ${{ github.event.inputs.tag != '' }}
        run: git checkout ${{ github.event.inputs.tag }}

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.7.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}

      - name: Setup SSH known hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.PROD_VM_HOST }} >> ~/.ssh/known_hosts

      - name: Create .env.prod file
        run: |
          cat > .env.prod << EOL
          DISCORD_CLIENT_ID=${{ secrets.DISCORD_CLIENT_ID }}
          DISCORD_CLIENT_SECRET=${{ secrets.DISCORD_CLIENT_SECRET }}
          DISCORD_REDIRECT_URI=http://52.160.40.146:3000/auth/redirect
          DISCORD_GUILD_ID=${{ secrets.DISCORD_GUILD_ID }}
          DISCORD_BOT_TOKEN=${{ secrets.DISCORD_BOT_TOKEN }}
          PORT=3000  # Fixed port for production
          DB_SERVICE_URL=http://localhost:3000
          MYSQL_HOST=mysql
          MYSQL_PORT=6969
          MYSQL_USER=root
          MYSQL_PASSWORD=
          MYSQL_DB=gameon_db
          SESSION_SECRET=yourSessionSecret
          REDIS_URL=redis://redis:6379
          EOL
      - name: Create backup
        run: |
          ssh ${{ secrets.PROD_VM_USERNAME }}@${{ secrets.PROD_VM_HOST }} "if [ -d ~/production ]; then \
            mkdir -p ~/backups && \
            cp -r ~/production ~/backups/production-backup-\$(date +%Y%m%d%H%M%S) && \
            echo 'Backup created' \
          fi"

      - name: Deploy to production environment
        run: |
          ssh ${{ secrets.PROD_VM_USERNAME }}@${{ secrets.PROD_VM_HOST }} "mkdir -p ~/production"
          scp -r ./backend ./docker-compose.yml ./.env.prod ${{ secrets.PROD_VM_USERNAME }}@${{ secrets.PROD_VM_HOST }}:~/production/

      - name: Stop current services and start new ones
        run: |
          ssh ${{ secrets.PROD_VM_USERNAME }}@${{ secrets.PROD_VM_HOST }} "cd ~/production && \
          docker compose -p production down || true && \
          docker compose -p production up -d --build && \
          echo 'Production deployment completed successfully'"